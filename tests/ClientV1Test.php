<?php


namespace Enius\Whereby\Test;

use Enius\Whereby\Exception\AccessTokenMissingException;
use Enius\Whereby\Provider\V1\Mapping;
use Enius\Whereby\Whereby;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Dotenv\Dotenv;

class ClientV1Test extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $fileNameEnv = dirname(__DIR__) . '/.env';
        if (file_exists($fileNameEnv)) {
            (new Dotenv())->load($fileNameEnv);
        }
    }

    /**
     * @testdox AccessTokenMissingException
     */
    public function testExceptionMissinToken()
    {
        $this->expectException(AccessTokenMissingException::class);
        Whereby::get(null)->v1();
    }

    /**
     * @testdox AccessTokenInvalidException
     */
    public function testExceptionInvalidToken()
    {
        $this->expectException(\GuzzleHttp\Exception\ClientException::class);
        $client = Whereby::get('INVALID_TOKEN')->v1();
        $client->meeting()->get($_ENV['TEST_WHEREBY_MEETING_ID_GET']);
    }

    /**
     * @testdox Get Meeting
     */
    public function testGetMeeting()
    {
        $client = Whereby::get($_ENV['WHEREBY_ACCESS_TOKEN'])->v1();
        $meeting = $client->meeting()->get($_ENV['TEST_WHEREBY_MEETING_ID_GET']);
        $this->assertInstanceOf(Mapping\Meeting\Get::class, $meeting);
        $this->assertNotEmpty($meeting->getMeetingId());
    }

//    /**
//     * @testdox Create Meeting
//     */
//    public function testCreateMeeting()
//    {
//        $client = Whereby::get($_ENV['WHEREBY_ACCESS_TOKEN'])->v1();
//        $meeting = $client->meeting()->create(uniqid(), (new \DateTime('now'))->format('c'), (new \DateTime('now'))->modify('+1day')->format('c'));
//        $this->assertInstanceOf(Mapping\Meeting\Create::class, $meeting);
//        $this->assertNotEmpty($meeting->getMeetingId());
//        dump('CREATE - MEETING ID' . $meeting->getMeetingId());
//    }

//    /**
//     * @testdox Delete Meeting
//     */
//    public function testDeleteMeeting()
//    {
//        $client = Whereby::get($_ENV['WHEREBY_ACCESS_TOKEN'])->v1();
//        $meeting = $client->meeting()->delete(565548);
//        $this->assertInstanceOf(Mapping\Meeting\Delete::class, $meeting);
//    }
}